AWSTemplateFormatVersion: 2010-09-09
Description: KMS Key, S3 bucket & role to use with all pipelines
# Using the same KMS key and S3 bucket simplifies resources and saves
# money. Using only one S3 bucket and having folders for each pipeline
# means there is only one place to look for artifacts. It also means
# that only one KMS key is needed, which saves money.

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: "Standard Details"
      Parameters:
        - AppName
        - Environment
    - Label:
        default: "Org Details"
      Parameters:
        - OrgID

Parameters:
  AppName:
    Type: String
    Default: infra
    Description: Name of the application (lowercase). Use infra for platform resources.
  Environment:
    Type: String
    Default: shared-services
    Description: An environment name that is prefixed to resource names
    AllowedValues:
    - dev
    - test
    - prod
    - shared-services
  OrgID:
    Type: String
    Description: Enter the Organisation ID.

Resources:
  ArtifactBucketKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key for encryption of CodePipeline Artifact bucket
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: AdministrativeAccess
            Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - kms:*
            Resource: '*'
          - Sid: Usage
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: '*'
            Condition:
                StringEquals:
                    aws:PrincipalOrgID: !Ref OrgID

  ArtifactBucketKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/S3/ArtifactBucket
      TargetKeyId: !Ref ArtifactBucketKmsKey

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      #AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt ArtifactBucketKmsKey.Arn
            BucketKeyEnabled: true
      BucketName: !Sub '${AppName}-${Environment}-artifact-bucket'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: ArtifactBucket

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ObjectAccess
            Action:
              - "s3:Get*"
              - "s3:Put*"
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactBucket
                - /*
            Principal:
              AWS:
                - "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgID
          - Sid: BucketAccess
            Action:
              - "s3:ListBucket"
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactBucket
            Principal:
              AWS:
                - "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgID

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "-", [!Ref AppName, !Ref Environment, "CodePipeline", "Role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"
      Policies:
        - PolicyName: cross_account_access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sts:AssumeRole"
                Resource: "arn:aws:iam::*:role/*"
                Condition:
                  StringEquals:
                    aws:PrincipalOrgID: !Ref OrgID

  CodePipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "-", [!Ref AppName, !Ref Environment, "CodePipeline", "Policy"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPipeline
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObject
              - s3:GetObjectAcl
              - codebuild:*
              - codecommit:*
              - cloudformation:*
              - iam:PassRole
              - sns:Publish
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource:
              - "*"
      Roles:
        -  !Ref CodePipelineRole

Outputs:
 ArtifactBucketName:
  Description: Name of the Artifact Bucket.
  Value: !Ref ArtifactBucket
  Export:
    Name: !Join ['-', [!Ref AppName, !Ref Environment, 'Bucket']]
 ArtifactBucketKey:
  Description: ARN of the Artifact bucket key.
  Value: !GetAtt ArtifactBucketKmsKey.Arn
  Export:
    Name: !Join ['-', [!Ref AppName, !Ref Environment, 'KeyArn']]
 PipelineRoleArn:
  Description: ARN of the CodePipeline Role.
  Value: !GetAtt CodePipelineRole.Arn
  Export:
    Name: !Join ['-', [!Ref AppName, !Ref Environment, 'PipeRole']]
